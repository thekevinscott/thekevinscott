{"version":3,"sources":["webpack:///path---tabbing-through-input-fields-aeae89e5a17e1b4be348.js","webpack:///./.cache/json/tabbing-through-input-fields.json"],"names":["webpackJsonp","569","module","exports","data","markdownRemark","html","timeToRead","frontmatter","date","path","title","image","childImageSharp","sizes","src","srcSet","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,q5YAAy3XC,WAAA,EAAAC,aAAq3BC,KAAA,2BAAAC,KAAA,iCAAAC,MAAA,+BAAAC,OAA0HC,iBAAmBC,OAASC,IAAA,4DAAAC,OAAA,kIAAAF,MAAA,wCAA4PG","file":"path---tabbing-through-input-fields-aeae89e5a17e1b4be348.js","sourcesContent":["webpackJsonp([245175683610111],{\n\n/***/ 569:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/800/1*RUuUJLHaYhyCDJKHvWjGfw.jpeg\\\">\\n<span class=\\\"figcaption_hack\\\">Photo by <a href=\\\"https://unsplash.com/photos/ICW6QYOcdlg\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Galymzhan Abdugalimov</a></span></p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/800/1*lQUxDjLJOjiqJbd2Q_4xTA.png\\\"></p>\\n<p>On the web, it’s common to tab through forms, an intuitive and <a href=\\\"https://www.nngroup.com/articles/web-form-design/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">UX-friendly\\npattern</a>. You get this out of\\nthe box with web forms, but when building apps with React Native, you need to\\nimplement this functionality yourself. Fortunately, it’s a cinch to set up.</p>\\n<h3 id=\\\"native-form-ux-vs-web-form-ux\\\"><a href=\\\"#native-form-ux-vs-web-form-ux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Native Form UX vs. Web Form UX</h3>\\n<p>First, let’s understand what native UX we’re trying to emulate on React Native.</p>\\n<p>Here’s a video of navigation through the native iOS contacts app:</p>\\n<p>And here’s a video of navigation through a Web form:</p>\\n<p>In summary, the iOS web browser gives us next and previous buttons, but for a\\nnative iOS app, these aren’t present, and <a href=\\\"https://github.com/facebook/react-native/issues/641#issuecomment-94522058\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native doesn’t support them\\nnatively,\\neither</a>.</p>\\n<p>I believe the reason for this discrepancy is that, natively, the “return” key\\nperforms double duty, tabbing through the form and submitting once the form is\\ncomplete. On the web, the “return” key will submit the form by default,\\nnecessitating the next/previous buttons.</p>\\n<p>We’ll focus on emulating the native functionality, relying on the “return” key\\nto tab through the form and submit it when complete.</p>\\n<h3 id=\\\"keyboards-and-textinput-on-react-native\\\"><a href=\\\"#keyboards-and-textinput-on-react-native\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyboards and TextInput on React Native</h3>\\n<p>We’ll be using <code>TextInput</code> and <code>View</code> from the <code>react-native</code> library, like so:</p>\\n<pre><code>import {\\n  TextInput,\\n  View,\\n} from 'react-native';\\n</code></pre>\\n<p>Each <code>TextInput</code> <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#keyboardtype\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">defines its own keyboard that appears when\\nfocused</a>.\\nThis allows a particular input field to specify <code>numeric</code>, <code>numpad</code>, or a number\\nof different options.</p>\\n<p><code>TextInput</code>s are also responsible for determining which input to send focus to\\nnext, and <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#onsubmitediting\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">they provide a handy prop for implementing\\nthis</a>.</p>\\n<h3 id=\\\"capturing-the-field-reference\\\"><a href=\\\"#capturing-the-field-reference\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Capturing the field reference</h3>\\n<p>The first thing we’ll need is to capture the <code>ref</code> of a particular input field.</p>\\n<p>If you’re not familiar, <a href=\\\"https://facebook.github.io/react/docs/refs-and-the-dom.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">a\\n</a><code>ref</code><a href=\\\"https://facebook.github.io/react/docs/refs-and-the-dom.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\"> is a\\nreference to the React\\ncomponent</a>. It’s\\nbest practice to specify a callback function and capture the referenced\\ncomponent from the arguments.</p>\\n<p>In our example, we’re storing each <code>TextInput</code>‘s ref on an internal <code>inputs</code>\\nobject we’ll define in the constructor. <strong>We specify a custom index we’ll use\\nlater to focus on the input.</strong></p>\\n<pre><code>&#x3C;TextInput\\n\\n  ref={ input => {\\n\\n    this.inputs['one'] = input;\\n\\n  }}\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>Since the ref is defined in the <code>render</code> function, don’t store the reference\\nwith <code>setState</code>; <a href=\\\"https://github.com/facebook/react/issues/5591\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">doing so will cause an infinite\\nloop</a> andmany tears will be shed.</p>\\n<h3 id=\\\"triggering-focus\\\"><a href=\\\"#triggering-focus\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Triggering focus</h3>\\n<p>Next, we need to focus on the next element. We do that by hooking into the\\n<code>onSubmitEditing</code> prop and supplying it with a custom focus function on the\\ncomponent.</p>\\n<pre><code>onSubmitEditing={() => {\\n\\n  // specify the key of the ref, as done in the previous section.\\n\\n  this.focusNextField('next-field');\\n\\n}}\\n</code></pre>\\n<p>Then, we set up the field. If we zoom out to the component level:</p>\\n<pre><code>class App extends React.Component {\\n\\n  constructor(props) {\\n\\n    super(props);\\n\\n    this.focusNextField = this.focusNextField.bind(this);\\n\\n    // to store our input refs\\n\\n    this.inputs = {};\\n\\n  }\\n\\n  focusNextField(key) {\\n\\n    this.inputs[key].focus();\\n\\n  }\\n\\n  ...\\n\\n}\\n</code></pre>\\n<p>Two things to point out:</p>\\n<ul>\\n<li><a href=\\\"http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">We need to bind the focus\\nfunction</a> to the\\nclass so we have an accurate reference to <code>this</code>. This is generally done in the\\nconstructor.</li>\\n<li>The focus action accepts a key indicating which input to focus on. That key\\nmatches what we use in the <code>ref</code> callback above.</li>\\n</ul>\\n<h3 id=\\\"avoiding-the-disappearing-keyboard\\\"><a href=\\\"#avoiding-the-disappearing-keyboard\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Avoiding the disappearing keyboard</h3>\\n<p>Sometimes as we’re tabbing between fields, the keyboard will disappear and\\nreappear. We can avoid this by using a prop on <code>TextInput</code> called\\n<code>blurOnSubmit</code>:</p>\\n<pre><code>&#x3C;TextInput\\n\\n  blurOnSubmit={ false }\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>This property forces the keyboard to remain visible. Since we’re immediately\\ntabbing to our next field, this behavior works nicely for us.</p>\\n<h3 id=\\\"return-key\\\"><a href=\\\"#return-key\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Return key</h3>\\n<p>Updating <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">the return\\nkey</a>\\nto match the correct action isn’t strictly necessary (and natively iOS doesn’t\\nchange its appearance) but I think updating to the relevant return key type is a\\nnice touch:</p>\\n<pre><code>&#x3C;TextInput\\n\\n  returnKeyType={ \\\"next\\\" }\\n\\n  ...\\n\\n/>\\n\\n&#x3C;TextInput\\n\\n  returnKeyType={ \\\"done\\\" }\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>This indicates how to show a <code>done</code> return key on the final input, and a\\n<code>next</code>return key on the rest of em.</p>\\n<h3 id=\\\"putting-it-all-together\\\"><a href=\\\"#putting-it-all-together\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Putting it all together</h3>\\n<p>The final gist is here:</p>\\n<p>You can see it in action on iOS and Android:</p>\\n<p><span class=\\\"figcaption_hack\\\">iOS</span></p>\\n<p><span class=\\\"figcaption_hack\\\">Android</span></p>\\n<ul>\\n<li><a href=\\\"https://medium.com/tag/javascript?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">JavaScript</a></li>\\n<li><a href=\\\"https://medium.com/tag/react?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React</a></li>\\n<li><a href=\\\"https://medium.com/tag/react-native?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native</a></li>\\n<li><a href=\\\"https://medium.com/tag/keyboard?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Keyboard</a></li>\\n<li><a href=\\\"https://medium.com/tag/es6?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">ES6</a></li>\\n</ul>\\n<p>By clapping more or less, you can signal to us which stories really stand out.</p>\\n<h3 id=\\\"kevin-scott\\\"><a href=\\\"#kevin-scott\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://medium.com/@thekevinscott\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Kevin Scott</a></h3>\\n<p>React &#x26; React Native // Chatbot Evangelist // Machine Learning //\\nCryptocurrencies // Desingineer 🤖</p>\\n<h3 id=\\\"react-native-cafe\\\"><a href=\\\"#react-native-cafe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://medium.com/reactnative?source=footer_card\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native Cafe</a></h3>\\n<p>Articles about React Native</p>\",\"timeToRead\":5,\"frontmatter\":{\"date\":\"2017-05-05T09:00:00.000Z\",\"path\":\"/tabbing-through-input-fields/\",\"title\":\"Tabbing Through Input Fields\",\"image\":{\"childImageSharp\":{\"sizes\":{\"src\":\"/static/cover-85cd840c0bc2ac3c286f02c25a993801-3497b.jpeg\",\"srcSet\":\"/static/cover-85cd840c0bc2ac3c286f02c25a993801-55d90.jpeg 600w,\\n/static/cover-85cd840c0bc2ac3c286f02c25a993801-3497b.jpeg 800w\",\"sizes\":\"(max-width: 800px) 100vw, 800px\"}}}}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tabbing-through-input-fields-aeae89e5a17e1b4be348.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"https://cdn-images-1.medium.com/max/800/1*RUuUJLHaYhyCDJKHvWjGfw.jpeg\\\">\\n<span class=\\\"figcaption_hack\\\">Photo by <a href=\\\"https://unsplash.com/photos/ICW6QYOcdlg\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Galymzhan Abdugalimov</a></span></p>\\n<p><img src=\\\"https://cdn-images-1.medium.com/max/800/1*lQUxDjLJOjiqJbd2Q_4xTA.png\\\"></p>\\n<p>On the web, it’s common to tab through forms, an intuitive and <a href=\\\"https://www.nngroup.com/articles/web-form-design/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">UX-friendly\\npattern</a>. You get this out of\\nthe box with web forms, but when building apps with React Native, you need to\\nimplement this functionality yourself. Fortunately, it’s a cinch to set up.</p>\\n<h3 id=\\\"native-form-ux-vs-web-form-ux\\\"><a href=\\\"#native-form-ux-vs-web-form-ux\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Native Form UX vs. Web Form UX</h3>\\n<p>First, let’s understand what native UX we’re trying to emulate on React Native.</p>\\n<p>Here’s a video of navigation through the native iOS contacts app:</p>\\n<p>And here’s a video of navigation through a Web form:</p>\\n<p>In summary, the iOS web browser gives us next and previous buttons, but for a\\nnative iOS app, these aren’t present, and <a href=\\\"https://github.com/facebook/react-native/issues/641#issuecomment-94522058\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native doesn’t support them\\nnatively,\\neither</a>.</p>\\n<p>I believe the reason for this discrepancy is that, natively, the “return” key\\nperforms double duty, tabbing through the form and submitting once the form is\\ncomplete. On the web, the “return” key will submit the form by default,\\nnecessitating the next/previous buttons.</p>\\n<p>We’ll focus on emulating the native functionality, relying on the “return” key\\nto tab through the form and submit it when complete.</p>\\n<h3 id=\\\"keyboards-and-textinput-on-react-native\\\"><a href=\\\"#keyboards-and-textinput-on-react-native\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Keyboards and TextInput on React Native</h3>\\n<p>We’ll be using <code>TextInput</code> and <code>View</code> from the <code>react-native</code> library, like so:</p>\\n<pre><code>import {\\n  TextInput,\\n  View,\\n} from 'react-native';\\n</code></pre>\\n<p>Each <code>TextInput</code> <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#keyboardtype\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">defines its own keyboard that appears when\\nfocused</a>.\\nThis allows a particular input field to specify <code>numeric</code>, <code>numpad</code>, or a number\\nof different options.</p>\\n<p><code>TextInput</code>s are also responsible for determining which input to send focus to\\nnext, and <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#onsubmitediting\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">they provide a handy prop for implementing\\nthis</a>.</p>\\n<h3 id=\\\"capturing-the-field-reference\\\"><a href=\\\"#capturing-the-field-reference\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Capturing the field reference</h3>\\n<p>The first thing we’ll need is to capture the <code>ref</code> of a particular input field.</p>\\n<p>If you’re not familiar, <a href=\\\"https://facebook.github.io/react/docs/refs-and-the-dom.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">a\\n</a><code>ref</code><a href=\\\"https://facebook.github.io/react/docs/refs-and-the-dom.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\"> is a\\nreference to the React\\ncomponent</a>. It’s\\nbest practice to specify a callback function and capture the referenced\\ncomponent from the arguments.</p>\\n<p>In our example, we’re storing each <code>TextInput</code>‘s ref on an internal <code>inputs</code>\\nobject we’ll define in the constructor. <strong>We specify a custom index we’ll use\\nlater to focus on the input.</strong></p>\\n<pre><code>&#x3C;TextInput\\n\\n  ref={ input => {\\n\\n    this.inputs['one'] = input;\\n\\n  }}\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>Since the ref is defined in the <code>render</code> function, don’t store the reference\\nwith <code>setState</code>; <a href=\\\"https://github.com/facebook/react/issues/5591\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">doing so will cause an infinite\\nloop</a> andmany tears will be shed.</p>\\n<h3 id=\\\"triggering-focus\\\"><a href=\\\"#triggering-focus\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Triggering focus</h3>\\n<p>Next, we need to focus on the next element. We do that by hooking into the\\n<code>onSubmitEditing</code> prop and supplying it with a custom focus function on the\\ncomponent.</p>\\n<pre><code>onSubmitEditing={() => {\\n\\n  // specify the key of the ref, as done in the previous section.\\n\\n  this.focusNextField('next-field');\\n\\n}}\\n</code></pre>\\n<p>Then, we set up the field. If we zoom out to the component level:</p>\\n<pre><code>class App extends React.Component {\\n\\n  constructor(props) {\\n\\n    super(props);\\n\\n    this.focusNextField = this.focusNextField.bind(this);\\n\\n    // to store our input refs\\n\\n    this.inputs = {};\\n\\n  }\\n\\n  focusNextField(key) {\\n\\n    this.inputs[key].focus();\\n\\n  }\\n\\n  ...\\n\\n}\\n</code></pre>\\n<p>Two things to point out:</p>\\n<ul>\\n<li><a href=\\\"http://egorsmirnov.me/2015/08/16/react-and-es6-part3.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">We need to bind the focus\\nfunction</a> to the\\nclass so we have an accurate reference to <code>this</code>. This is generally done in the\\nconstructor.</li>\\n<li>The focus action accepts a key indicating which input to focus on. That key\\nmatches what we use in the <code>ref</code> callback above.</li>\\n</ul>\\n<h3 id=\\\"avoiding-the-disappearing-keyboard\\\"><a href=\\\"#avoiding-the-disappearing-keyboard\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Avoiding the disappearing keyboard</h3>\\n<p>Sometimes as we’re tabbing between fields, the keyboard will disappear and\\nreappear. We can avoid this by using a prop on <code>TextInput</code> called\\n<code>blurOnSubmit</code>:</p>\\n<pre><code>&#x3C;TextInput\\n\\n  blurOnSubmit={ false }\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>This property forces the keyboard to remain visible. Since we’re immediately\\ntabbing to our next field, this behavior works nicely for us.</p>\\n<h3 id=\\\"return-key\\\"><a href=\\\"#return-key\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Return key</h3>\\n<p>Updating <a href=\\\"https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">the return\\nkey</a>\\nto match the correct action isn’t strictly necessary (and natively iOS doesn’t\\nchange its appearance) but I think updating to the relevant return key type is a\\nnice touch:</p>\\n<pre><code>&#x3C;TextInput\\n\\n  returnKeyType={ \\\"next\\\" }\\n\\n  ...\\n\\n/>\\n\\n&#x3C;TextInput\\n\\n  returnKeyType={ \\\"done\\\" }\\n\\n  ...\\n\\n/>\\n</code></pre>\\n<p>This indicates how to show a <code>done</code> return key on the final input, and a\\n<code>next</code>return key on the rest of em.</p>\\n<h3 id=\\\"putting-it-all-together\\\"><a href=\\\"#putting-it-all-together\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Putting it all together</h3>\\n<p>The final gist is here:</p>\\n<p>You can see it in action on iOS and Android:</p>\\n<p><span class=\\\"figcaption_hack\\\">iOS</span></p>\\n<p><span class=\\\"figcaption_hack\\\">Android</span></p>\\n<ul>\\n<li><a href=\\\"https://medium.com/tag/javascript?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">JavaScript</a></li>\\n<li><a href=\\\"https://medium.com/tag/react?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React</a></li>\\n<li><a href=\\\"https://medium.com/tag/react-native?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native</a></li>\\n<li><a href=\\\"https://medium.com/tag/keyboard?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Keyboard</a></li>\\n<li><a href=\\\"https://medium.com/tag/es6?source=post\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">ES6</a></li>\\n</ul>\\n<p>By clapping more or less, you can signal to us which stories really stand out.</p>\\n<h3 id=\\\"kevin-scott\\\"><a href=\\\"#kevin-scott\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://medium.com/@thekevinscott\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Kevin Scott</a></h3>\\n<p>React &#x26; React Native // Chatbot Evangelist // Machine Learning //\\nCryptocurrencies // Desingineer 🤖</p>\\n<h3 id=\\\"react-native-cafe\\\"><a href=\\\"#react-native-cafe\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><a href=\\\"https://medium.com/reactnative?source=footer_card\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Native Cafe</a></h3>\\n<p>Articles about React Native</p>\",\"timeToRead\":5,\"frontmatter\":{\"date\":\"2017-05-05T09:00:00.000Z\",\"path\":\"/tabbing-through-input-fields/\",\"title\":\"Tabbing Through Input Fields\",\"image\":{\"childImageSharp\":{\"sizes\":{\"src\":\"/static/cover-85cd840c0bc2ac3c286f02c25a993801-3497b.jpeg\",\"srcSet\":\"/static/cover-85cd840c0bc2ac3c286f02c25a993801-55d90.jpeg 600w,\\n/static/cover-85cd840c0bc2ac3c286f02c25a993801-3497b.jpeg 800w\",\"sizes\":\"(max-width: 800px) 100vw, 800px\"}}}}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tabbing-through-input-fields.json\n// module id = 569\n// module chunks = 245175683610111"],"sourceRoot":""}