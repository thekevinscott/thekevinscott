{"version":3,"sources":["webpack:///path---arrays-in-react-16-64d9427a01f646c895ef.js","webpack:///./.cache/json/arrays-in-react-16.json"],"names":["webpackJsonp","556","module","exports","data","markdownRemark","html","timeToRead","frontmatter","date","path","title","image","childImageSharp","sizes","src","srcSet","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,66IAA61GC,WAAA,EAAAC,aAAsrCC,KAAA,2BAAAC,KAAA,uBAAAC,MAAA,+CAAAC,OAAgIC,iBAAmBC,OAASC,IAAA,4DAAAC,OAAA,qMAAAF,MAAA,0CAAiUG","file":"path---arrays-in-react-16-64d9427a01f646c895ef.js","sourcesContent":["webpackJsonp([63140056250670],{\n\n/***/ 556:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Over the weekend at <a href=\\\"http://www.reactboston.com/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Boston</a> <a href=\\\"http://www.benmvp.com/slides/2017/reactboston/fiber.html#/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">I saw a great\\ntalk</a> by <a href=\\\"https://medium.com/@benmvp\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Ben\\nIlegbodu</a> where he discussed changes in the\\n<a href=\\\"https://github.com/acdlite/react-fiber-architecture\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">upcoming Fiber release</a>\\nfor React 16.</p>\\n<p>A common complaint in React 15 and below has been the inability to directly\\nreturn an array of elements. React traditionally has required render functions\\nto return a single top-level parent element. This means that when returning\\nlists, you'd have to enclose the list in a container element:</p>\\n<pre><code>// Valid React 15\\nconst Page = () => (\\n  &#x3C;div>\\n    &#x3C;a href=\\\"#one\\\">One&#x3C;/a>\\n    &#x3C;a href=\\\"#two\\\">Two&#x3C;/a>\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<p>This often leads to extraneous markup with <code>div</code>s that pollute the HTML. In\\nReact 16, you can return arrays of elements:</p>\\n<pre><code>// Valid React 16, invalid React 15\\nconst Page = () => ([\\n  &#x3C;a key=\\\"one\\\" href=\\\"#one\\\">One&#x3C;/a>\\n  &#x3C;a key=\\\"two\\\" href=\\\"#two\\\">Two&#x3C;/a>\\n]);\\n</code></pre>\\n<p>You'll notice each element has a unique <code>key</code>. From the React docs:</p>\\n<blockquote>\\n<p>Keys help React identify which items have changed, are added, or are removed.\\nKeys should be given to the elements inside the array to give the elements a\\nstable identity — <a href=\\\"https://facebook.github.io/react/docs/lists-and-keys.html#keys\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Lists and\\nKeys</a></p>\\n</blockquote>\\n<p>In practice, unique keys might look something like this:</p>\\n<pre><code>// where href is guaranteed to be unique\\nconst Header = ({ links }) => (\\n  &#x3C;div>\\n    {links.map(link => (\\n      &#x3C;a key={link.href} href={link.href}>{link.label}&#x3C;/a>\\n    ))}\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<p><a href=\\\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318</a></p>\\n<p>Returning unique <code>key</code>s from the render method helps React identify what needs\\nto be re-rendered. But it also adds some verbosity to the code that feels\\nredundant; for instance, we don't need to add keys when returning top-level\\nelements.</p>\\n<p>In his talk, <a href=\\\"https://medium.com/@benmvp\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Ben</a> highlighted a library,\\n<a href=\\\"https://github.com/gajus/react-aux\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">react-aux</a>, that addresses this verbosity\\nproblem and removes the need to provide explicit keys:</p>\\n<pre><code>const Root = () => {\\n  return &#x3C;Aux>\\n    &#x3C;p>Hello, World!&#x3C;/p>\\n    &#x3C;p>I am a demo for react-aux.&#x3C;/p>\\n  &#x3C;/Aux>;\\n};\\n\\n// which is equivalent to the following:\\nconst Root = () => {\\n  const Aux = (props) => props.children;\\n\\n  return &#x3C;Aux>\\n    &#x3C;p>Hello, World!&#x3C;/p>\\n    &#x3C;p>I am a demo for react-aux.&#x3C;/p>\\n  &#x3C;/Aux>;\\n};\\n</code></pre>\\n<p><a href=\\\"https://medium.com/@gajus\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Gajus Kuizinas</a>'s package leverages the fact that\\nyou can omit unique keys for a list of elements by directly returning <code>children</code>\\nfrom a container div.</p>\\n<p>But that makes me question: **Why is it valid to return children without keys,\\nbut invalid to return a top level array without keys? **I suspect the answer has\\nsomething to do with providing a top-level node for the children to live under.\\nBut why do nested siblings in a regular <code>render</code> function not require keys as\\nwell?</p>\\n<p>If you know the answer, please leave a comment! I'm hoping to dig more into\\nReact 16 and see if I can answer this myself.</p>\\n<hr>\\n<p><em>Edit (9/29/2017):</em> Looks like the team is thinking about addressing this in the\\nfuture:</p>\\n<blockquote>\\n<p>In the future, we'll likely add a special fragment syntax to JSX that doesn't\\nrequire keys. — <a href=\\\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Andrew\\nClark</a></p>\\n</blockquote>\\n<p>So there you have it!</p>\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-09-26T09:00:00.000Z\",\"path\":\"/arrays-in-react-16/\",\"title\":\"Arrays in React 16 and the necessity of keys\",\"image\":{\"childImageSharp\":{\"sizes\":{\"src\":\"/static/cover-0b6ab676358f376626847a187aaf8f44-9c672.jpeg\",\"srcSet\":\"/static/cover-0b6ab676358f376626847a187aaf8f44-f4c48.jpeg 600w,\\n/static/cover-0b6ab676358f376626847a187aaf8f44-5b977.jpeg 1200w,\\n/static/cover-0b6ab676358f376626847a187aaf8f44-9c672.jpeg 2000w\",\"sizes\":\"(max-width: 2000px) 100vw, 2000px\"}}}}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---arrays-in-react-16-64d9427a01f646c895ef.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Over the weekend at <a href=\\\"http://www.reactboston.com/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">React Boston</a> <a href=\\\"http://www.benmvp.com/slides/2017/reactboston/fiber.html#/\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">I saw a great\\ntalk</a> by <a href=\\\"https://medium.com/@benmvp\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Ben\\nIlegbodu</a> where he discussed changes in the\\n<a href=\\\"https://github.com/acdlite/react-fiber-architecture\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">upcoming Fiber release</a>\\nfor React 16.</p>\\n<p>A common complaint in React 15 and below has been the inability to directly\\nreturn an array of elements. React traditionally has required render functions\\nto return a single top-level parent element. This means that when returning\\nlists, you'd have to enclose the list in a container element:</p>\\n<pre><code>// Valid React 15\\nconst Page = () => (\\n  &#x3C;div>\\n    &#x3C;a href=\\\"#one\\\">One&#x3C;/a>\\n    &#x3C;a href=\\\"#two\\\">Two&#x3C;/a>\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<p>This often leads to extraneous markup with <code>div</code>s that pollute the HTML. In\\nReact 16, you can return arrays of elements:</p>\\n<pre><code>// Valid React 16, invalid React 15\\nconst Page = () => ([\\n  &#x3C;a key=\\\"one\\\" href=\\\"#one\\\">One&#x3C;/a>\\n  &#x3C;a key=\\\"two\\\" href=\\\"#two\\\">Two&#x3C;/a>\\n]);\\n</code></pre>\\n<p>You'll notice each element has a unique <code>key</code>. From the React docs:</p>\\n<blockquote>\\n<p>Keys help React identify which items have changed, are added, or are removed.\\nKeys should be given to the elements inside the array to give the elements a\\nstable identity — <a href=\\\"https://facebook.github.io/react/docs/lists-and-keys.html#keys\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Lists and\\nKeys</a></p>\\n</blockquote>\\n<p>In practice, unique keys might look something like this:</p>\\n<pre><code>// where href is guaranteed to be unique\\nconst Header = ({ links }) => (\\n  &#x3C;div>\\n    {links.map(link => (\\n      &#x3C;a key={link.href} href={link.href}>{link.label}&#x3C;/a>\\n    ))}\\n  &#x3C;/div>\\n);\\n</code></pre>\\n<p><a href=\\\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318</a></p>\\n<p>Returning unique <code>key</code>s from the render method helps React identify what needs\\nto be re-rendered. But it also adds some verbosity to the code that feels\\nredundant; for instance, we don't need to add keys when returning top-level\\nelements.</p>\\n<p>In his talk, <a href=\\\"https://medium.com/@benmvp\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Ben</a> highlighted a library,\\n<a href=\\\"https://github.com/gajus/react-aux\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">react-aux</a>, that addresses this verbosity\\nproblem and removes the need to provide explicit keys:</p>\\n<pre><code>const Root = () => {\\n  return &#x3C;Aux>\\n    &#x3C;p>Hello, World!&#x3C;/p>\\n    &#x3C;p>I am a demo for react-aux.&#x3C;/p>\\n  &#x3C;/Aux>;\\n};\\n\\n// which is equivalent to the following:\\nconst Root = () => {\\n  const Aux = (props) => props.children;\\n\\n  return &#x3C;Aux>\\n    &#x3C;p>Hello, World!&#x3C;/p>\\n    &#x3C;p>I am a demo for react-aux.&#x3C;/p>\\n  &#x3C;/Aux>;\\n};\\n</code></pre>\\n<p><a href=\\\"https://medium.com/@gajus\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Gajus Kuizinas</a>'s package leverages the fact that\\nyou can omit unique keys for a list of elements by directly returning <code>children</code>\\nfrom a container div.</p>\\n<p>But that makes me question: **Why is it valid to return children without keys,\\nbut invalid to return a top level array without keys? **I suspect the answer has\\nsomething to do with providing a top-level node for the children to live under.\\nBut why do nested siblings in a regular <code>render</code> function not require keys as\\nwell?</p>\\n<p>If you know the answer, please leave a comment! I'm hoping to dig more into\\nReact 16 and see if I can answer this myself.</p>\\n<hr>\\n<p><em>Edit (9/29/2017):</em> Looks like the team is thinking about addressing this in the\\nfuture:</p>\\n<blockquote>\\n<p>In the future, we'll likely add a special fragment syntax to JSX that doesn't\\nrequire keys. — <a href=\\\"https://reactjs.org/blog/2017/09/26/react-v16.0.html\\\" target=\\\"_blank\\\" rel=\\\"nofollow noopener noreferrer\\\">Andrew\\nClark</a></p>\\n</blockquote>\\n<p>So there you have it!</p>\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2017-09-26T09:00:00.000Z\",\"path\":\"/arrays-in-react-16/\",\"title\":\"Arrays in React 16 and the necessity of keys\",\"image\":{\"childImageSharp\":{\"sizes\":{\"src\":\"/static/cover-0b6ab676358f376626847a187aaf8f44-9c672.jpeg\",\"srcSet\":\"/static/cover-0b6ab676358f376626847a187aaf8f44-f4c48.jpeg 600w,\\n/static/cover-0b6ab676358f376626847a187aaf8f44-5b977.jpeg 1200w,\\n/static/cover-0b6ab676358f376626847a187aaf8f44-9c672.jpeg 2000w\",\"sizes\":\"(max-width: 2000px) 100vw, 2000px\"}}}}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/arrays-in-react-16.json\n// module id = 556\n// module chunks = 63140056250670"],"sourceRoot":""}